NAME
    Catalyst::Controller::HTML::FormFu

SYNOPSIS
        package MyApp::Controller::My::Controller;
    
        use base 'Catalyst::Controller::HTML::FormFu';
    
        sub foo : Local : Form {
            my ( $self, $c ) = @_;
        
            # using the Form attribute is equivalent to:
            #
            # my $form = HTML::FormFu->new;
            #
            # $form->query( $c->request );
            # 
            # $c->stash->{form} = $form;
        }
    
        sub bar : Local : FormConfig {
            my ( $self, $c ) = @_;
        
            # using the FormConfig attribute is equivalent to:
            #
            # my $form = HTML::FormFu->new;
            #
            # $form->load_config_file('root/forms/my/controller/bar.yml');
            #
            # $form->process( $c->request );
            #
            # $c->stash->{form} = $form;
            #
            # so you only need to do the following...
        
            my $form = $c->stash->{form};
        
            if ( $form->submitted && !$form->has_errors ) {
                do_something();
            }
        }
    
        sub baz : Local : FormConfig('my_config') {
            my ( $self, $c ) = @_;
        
            # using the FormConfig attribute with an argument is equivalent to:
            #
            # my $form = HTML::FormFu->new;
            #
            # $form->load_config_file('root/forms/my_config.yml');
            #
            # $form->process( $c->request );
            #
            # $c->stash->{form} = $form;
            #
            # so you only need to do the following...
        
            my $form = $c->stash->{form};
        
            if ( $form->submitted && !$form->has_errors ) {
                do_something();
            }
        }
    
        sub quux : Local : FormMethod('load_form') {
            my ( $self, $c ) = @_;
        
            # using the FormConfig attribute with an argument is equivalent to:
            #
            # my $form = HTML::FormFu->new;
            #
            # $form->populate( $c->load_form );
            #
            # $form->process( $c->request );
            #
            # $c->stash->{form} = $form;
            #
            # so you only need to do the following...
        
            my $form = $c->stash->{form};
        
            if ( $form->submitted && !$form->has_errors ) {
                do_something();
            }
        }
    
        sub load_form {
            my ( $self, $c ) = @_;
        
            # Automatically called by the above FormMethod('load_form') action.
            # Called as a method on the controller object, with the context 
            # object as an argument.
        
            # Must return a hash-ref suitable to be fed to $form->populate()
        }

METHODS
  form
    This creates a new HTML::FormFu object, passing as it's argument the
    contents of the "constructor" config value.

    This is useful when using the ConfigForm() or MethodForm() action
    attributes, to create a 2nd form which isn't populated using a
    config-file or method return value.

        sub foo : Local {
            my ( $self, $c ) = @_;
        
            my $form = $self->form;
        }

    Note that when using this method, the form's query method is not
    populated with the Catalyst request object.

CUSTOMIZATION
    You can set your own config settings, using either your controller
    config or your application config.

        $c->config( 'Controller::HTML::FormFu' => \%my_values );
    
        # or
    
        MyApp->config( 'Controller::HTML::FormFu' => \%my_values );
    
        # or, in myapp.yml
    
        ---
        'Controller::HTML::FormFu': {  }

  form_method
    Override the method-name used to create a new form object.

    See "form".

    Default value: "form".

  form_stash
    Sets the stash key name used to store the form object.

    Default value: "form".

  form_attr
    Sets the attribute name used to load the
    Catalyst::Controller::HTML::FormFu::Action::Form action.

    Default value: "Form".

  config_attr
    Sets the attribute name used to load the
    Catalyst::Controller::HTML::FormFu::Action::Config action.

    Default value: "FormConfig".

  method_attr
    Sets the attribute name used to load the
    Catalyst::Controller::HTML::FormFu::Action::Method action.

    Default value: "FormMethod".

  form_action
    Sets which package will be used by the Form() action.

    Probably only useful if you want to create a sub-class which provides
    custom behaviour.

    Default value: "Catalyst::Controller::HTML::FormFu::Action::Form".

  config_action
    Sets which package will be used by the Config() action.

    Probably only useful if you want to create a sub-class which provides
    custom behaviour.

    Default value: "Catalyst::Controller::HTML::FormFu::Action::Config".

  method_action
    Sets which package will be used by the Method() action.

    Probably only useful if you want to create a sub-class which provides
    custom behaviour.

    Default value: "Catalyst::Controller::HTML::FormFu::Action::Method".

  constructor
    Pass common defaults to the HTML::FormFu constructor.

    These values are used by all of the action attributes, and by the
    "$self->form" method.

    Default value: "{}".

  config_callback
    Arguments: bool

    If true, a coderef is passed to "$form->config_callback->{plain_value}"
    which replaces any instance of "__uri_for(URI)__" found in form config
    files with the result of passing the "URI" argument to "uri_for" in
    Catalyst.

    The form "__uri_for(URI, PATH, PARTS)__" is also supported, which is
    equivalent to "$c->uri_for( 'URI', \@ARGS )". At this time, there is no
    way to pass query values equivalent to "$c->uri_for( 'URI', \@ARGS,
    \%QUERY_VALUES )".

    The second codeword that is being replaced is "__path_to( @DIRS )__".
    Any instance is replaced with the result of passing the "DIRS" arguments
    to "path_to" in Catalyst. Don't use qoutationmarks as they would become
    part of the path.

    Default value: 1

  config_file_path
    Location of the form config files, used when creating a form with the
    "FormConfig" action controller.

    Default Value: "$c->path_to( 'root', 'forms' )"

  config_file_ext
    Set the default file extension used by the Config() action attribute.
    This setting is appended to both explicit config filenames, and
    auto-generated filenames.

    Default value: ".yml".

  default_action_use_name
    If set to a true value the action for the form will be set to the
    currently called action name.

    Default value: "false".

  default_action_use_path
    If set to a true value the action for the form will be set to the
    currently called action path. The action path includes concurrent to
    action name additioal parameters which were code inside the path.

    Default value: "false".

    Example: action: /foo/bar called uri contains: /foo/bar/1

    default_action_use_name => 1 leads to $form->action = /foo/bar

    default_action_use_path => 1 leads to $form->action = /foo/bar/1

  context_stash
    To allow your form validation packages, etc, access to the catalyst
    context, a weakened reference of the context is copied into the form's
    stash.

        $form->stash->{context};

    This setting allows you to change the key name used in the form stash.

    Default value: "context"

  languages_from_context
    If you're using a L10N / I18N plugin such as Catalyst::Plugin::I18N
    which provides a "languages" method that returns a list of valid
    languages to use for the currect request - and you want to use formfu's
    built-in I18N packages, then setting "languages_from_context"

  localize_from_context
    If you're using a L10N / I18N plugin such as Catalyst::Plugin::I18N
    which provides it's own "localize" method, you can set
    localize_from_context to use that method for formfu's localization.

CAVEATS
    When using the "Form" action attribute to create an empty form, you must
    call $form->process after populating the form. However, you don't need
    to pass any arguments to "process", as the Catalyst request object will
    have automatically been set in $form->query.

    When using the "FormConfig" and "FormMethod" action attributes, if you
    make any modifications to the form, such as adding or changing it's
    elements, you must call $form->process before rendering the form.

SEE ALSO
    HTML::FormFu, Catalyst::Helper::HTML::FormFu

AUTHOR
    Carl Franks, "cfranks@cpan.org"

COPYRIGHT AND LICENSE
    Copyright (C) 2007 by Carl Franks

    This library is free software; you can redistribute it and/or modify it
    under the same terms as Perl itself, either Perl version 5.8.8 or, at
    your option, any later version of Perl 5 you may have available.

